# based on https://klipper.discourse.group/t/interruptible-heat-soak/1552

[gcode_macro HEAT_SOAK]
variable_target_temp: 0
variable_stage: None # heating -> soaking -> done (or cancel)

# in seconds
variable_check_interval: 6
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
  {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
  {% set TARGET = params.TARGET|default(40)|float %}
  {% set DURATION = params.DURATION|default(20)|float %} # minutes

  # store what we need later
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp VALUE={TARGET}
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'heating'"
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={DURATION * 60}
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE=0

  # turn on the bed
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  # run fan to circulate air
  M106 S255
  # put the nozzle in a good place to measure ambient temp
  G28
  CENTER Z=50
  # turn off steppers
  M84
  # play a jolly start tone
  JINGLE_START
  # start periodic check
  UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={check_interval}

[gcode_macro CANCEL_HEAT_SOAK]
gcode:
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
  UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[gcode_macro HEAT_SOAK_CANCEL]
gcode:
  CANCEL_HEAT_SOAK

[delayed_gcode heat_soaker]
gcode:
  {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

  # update elapsed time
  {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={total_time_elapsed}

  # heating -> soaking
  {% set stage = heat_soak.stage %}
  {% if stage == "heating" and printer[printer.toolhead.extruder].temperature >= heat_soak.target_temp %}
    {% set stage = "soaking" %}
  {% endif %}

  # FIXME heating -> cancel if the toolhead doesn't keep rising

  # soaking -> done
  {% if stage == "soaking" %}
    {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0]|max %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={soak_time_remaining}
    {% if soak_time_remaining <= 0 %}
      {% set stage = "done" %}
    {% endif %}
  {% endif %}

  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{stage}'"

  {% if stage in ("done", "cancel") %}
    # reset everything and print a message
    {% if stage == "cancel" %}
      {% set stage = "done" %}
      # turn off heaters and fan
      TURN_OFF_HEATERS
      M107
      M117 Cancelled.
    {% else %}
      M117 Soaked.
      # FIXME this should also work in octopod, but it doesn't
      {action_respond_info("action:notification Heat soak complete after %.1fm" | format(total_time_elapsed / 60.0))}
      # play a jolly end tone
      JINGLE_END
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp VALUE=0
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE=0
  {% else %}
    {% if stage == "heating" %}
      M117 {"Heating (%.1fm)" | format(total_time_elapsed / 60.0)}
    {% elif stage == "soaking" %}
      M117 {"Soak for %.1fm" | format(soak_time_remaining / 60.0)}
    {% endif %}

    # tail recursion
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={heat_soak.check_interval}

    # dwell to prevent idle timeout
    G4 P1
  {% endif %}
