[gcode_macro _probe_settings]
description: Storage for probe constants.
gcode:
variable_speed:        200   # how fast to move to dock area
variable_accel:        1000  # acceleration to use
variable_shear_speed:  100   # how fast to shear off magnets
variable_dock_x:       190   # location of dock on X
variable_dock_deploy:  40    # angle of servo to deploy dock
variable_dock_retract: 110   # angle of servo to retract dock
variable_dock_delay:   250   # ms to keep servo on
variable_dock_wait:     50   # ms to wait for servo to settle
variable_dock_shear_x: -50   # amount and direction to move to undock
variable_z_hop:        12    # amount to lift for dock clearance
variable_z_hop_speed:  20    # speed of z hop lift

[probe]
pin: sb:ENDSTOP0
x_offset: -1.0
y_offset: 23.0
z_offset: 6.494

[servo probe_dock]
pin: SERVO
maximum_servo_angle: 180
minimum_pulse_width: 0.00025
maximum_pulse_width: 0.0024

[bed_mesh]
speed: 200
horizontal_move_z: 10
# avoid recesses in screw corners
mesh_min: 10, 20
mesh_max: 210, 200
probe_count: 6, 6
algorithm: bicubic
fade_start: 1
fade_end: 10

#
# The following macros handle probe docking, undocking, and homing.
# They are adapted from the Klicky macros, but simplified.
# https://github.com/jlas1/Klicky-Probe/blob/ab86f91/Klipper_macros/klicky-macros.cfg
#

# macros need these settings
[respond]
[force_move]
enable_force_move: True

# do some initialization at startup
[delayed_gcode initialize_probe]
initial_duration: 1
gcode:
    retract_probe_dock
    query_probe_attached

[gcode_macro query_probe_attached]
variable_attached: 0
description:
    query the probe state, optionally failing if not the same as ATTACHED
gcode:
    query_probe
    _query_probe_attached attached={params.ATTACHED}

# querying endstops requires this nested macro nonsense
[gcode_macro _query_probe_attached]
description: implementation detail of QUERY_PROBE_ATTACHED
gcode:
    {% set triggered = printer.probe.last_query %}
    {% set attached = params.ATTACHED|default('') %}
    {% if triggered %}
       set_gcode_variable macro=query_probe_attached variable=attached value=0
    {% else %}
       set_gcode_variable macro=query_probe_attached variable=attached value=1
    {% endif %}

    {% if attached == '' %}
       {% if triggered %}
          { action_respond_info('Probe is not attached.') }
       {% else %}
          { action_respond_info('Probe is attached.') }
       {% endif %}
    {% elif attached == '0' %}
       {% if not triggered %}
          { action_raise_error('Probe dock failed!') }
       {% endif %}
    {% else %}
       {% if triggered %}
          { action_raise_error('Probe attach failed!') }
       {% endif %}
    {% endif %}

[gcode_macro deploy_probe_dock]
description: deploy the Z probe dock
gcode:
    {% set dock_deploy = printer['gcode_macro _probe_settings'].dock_deploy %}
    {% set dock_delay = printer['gcode_macro _probe_settings'].dock_delay %}
    M400
    set_servo servo=probe_dock angle={dock_deploy}
    G4 P{dock_delay}
    set_servo servo=probe_dock width=0
    M400

[gcode_macro retract_probe_dock]
description: retract the Z probe dock
gcode:
    {% set dock_retract = printer['gcode_macro _probe_settings'].dock_retract %}
    {% set dock_delay = printer['gcode_macro _probe_settings'].dock_delay %}
    M400
    set_servo servo=probe_dock angle={dock_retract}
    G4 P{dock_delay}
    set_servo servo=probe_dock width=0
    M400

[gcode_macro undock_probe]
description: attaches Z probe
gcode:
    attach_probe back={params.BACK|default(0)}

[gcode_macro attach_probe]
description: attaches Z probe
gcode:
    {% set speed = printer['gcode_macro _probe_settings'].speed * 60 %}
    {% set accel = printer['gcode_macro _probe_settings'].accel %}
    {% set dock_x = printer['gcode_macro _probe_settings'].dock_x %}
    {% set dock_wait = printer['gcode_macro _probe_settings'].dock_wait %}

    {% if not printer['gcode_macro query_probe_attached'].attached %}
        # check prerequisites
        {% if not 'x' in printer.toolhead.homed_axes %}
           { action_raise_error('Must home X axis first!') }
        {% endif %}

        # prologue
        M400
        save_gcode_state name=attach_probe
        G90
        set_velocity_limit accel={accel}

        # travel to dock location
        G0 X{dock_x} F{speed}

        # deploy, wait, and retract probe dock
        deploy_probe_dock
        G4 P{dock_wait}
        retract_probe_dock

        # epilogue
        M400
        set_velocity_limit accel={printer.configfile.settings.printer.max_accel}
        restore_gcode_state name=attach_probe move={params.BACK|default(0)} move_speed={speed}
    {% endif %}
    query_probe_attached attached=1

[gcode_macro dock_probe]
description: docks Z probe
gcode:
    {% set speed = printer['gcode_macro _probe_settings'].speed * 60 %}
    {% set accel = printer['gcode_macro _probe_settings'].accel %}
    {% set shear_speed = printer['gcode_macro _probe_settings'].shear_speed * 60 %}
    {% set dock_x = printer['gcode_macro _probe_settings'].dock_x %}
    {% set dock_wait = printer['gcode_macro _probe_settings'].dock_wait %}
    {% set dock_shear_x = printer['gcode_macro _probe_settings'].dock_shear_x %}

    {% if printer['gcode_macro query_probe_attached'].attached %}
        # check prerequisites
        {% if not 'x' in printer.toolhead.homed_axes %}
           { action_raise_error('Must home X axis first!') }
        {% endif %}

        # prologue
        M400
        save_gcode_state name=dock_probe
        G90
        set_velocity_limit accel={accel}

        # travel to dock location
        G0 X{dock_x} F{speed}

        # deploy and wait
        deploy_probe_dock
        G4 P{dock_wait}

        # move away, shearing magnets
        G0 X{dock_x + dock_shear_x} F{shear_speed}

        # retract dock
        retract_probe_dock

        # epilogue
        M400
        set_velocity_limit accel={printer.configfile.settings.printer.max_accel}
        restore_gcode_state name=dock_probe move={params.BACK|default(0)} move_speed={speed}
    {% endif %}
    query_probe_attached attached=0

[homing_override]
axes: z
gcode:
    {% set speed = printer['gcode_macro _probe_settings'].speed * 60 %}
    {% set accel = printer['gcode_macro _probe_settings'].accel %}
    {% set z_hop = printer['gcode_macro _probe_settings'].z_hop %}
    {% set z_hop_speed = printer['gcode_macro _probe_settings'].z_hop_speed * 60 %}

    {% set x_offset = printer.configfile.settings.probe.x_offset %}
    {% set y_offset = printer.configfile.settings.probe.y_offset %}
    {% set mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}

    # sort out what axes to home
    {% set home_x, home_y, home_z = False, False, False %}
    {% if 'X' in params %}
       {% set home_x = True %}
    {% endif %}
    {% if 'Y' in params %}
       {% set home_y = True %}
    {% endif %}
    {% if 'Z' in params %}
       {% set home_z = True %}
    {% endif %}
    {% if not (home_x or home_y or home_z) %}
       {% set home_x, home_y, home_z = True, True, True %}
    {% endif %}

    # home X and Y as needed
    {% if home_x or (home_z and 'x' not in printer.toolhead.homed_axes) %}
       G28 X
    {% endif %}
    {% if home_y or (home_z and 'y' not in printer.toolhead.homed_axes) %}
       G28 Y
    {% endif %}

    {% if home_z %}
        # prologue
        M400
        save_gcode_state name=homing_override
        G90
        set_velocity_limit accel={accel}

        # z hop
        {% if not 'z' in printer.toolhead.homed_axes %}
           set_kinematic_position z=0 set_homed=Z
           G0 Z{z_hop} F{z_hop_speed}
        {% elif printer.gcode_move.gcode_position.z < z_hop %}
           G0 Z{z_hop} F{z_hop_speed}
        {% endif %}

        # attach the probe
        attach_probe

        # move to the center
        {% set center_x = (mesh_max[0] + mesh_min[0]) / 2 %}
        {% set center_y = (mesh_max[1] + mesh_min[1]) / 2 %}
        G0 X{center_x - x_offset} Y{center_y - y_offset} F{speed}

        # home Z
        G28 Z

        # move to safe z and dock probe
        G0 Z{z_hop} F{z_hop_speed}
        {% if not 'KEEP_PROBE' in params %}
          dock_probe back=1
        {% endif %}

        # epilogue
        M400
        set_velocity_limit accel={printer.configfile.settings.printer.max_accel}
        restore_gcode_state name=homing_override
    {% endif %}
